<Application
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls" 
            xmlns:shared="http://metro.mahapps.com/winfx/xaml/shared"
            xmlns:converters="clr-namespace:EasyBudgetApp.Views.Converters"
            x:Class="EasyBudgetApp.App">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
                <ResourceDictionary Source="/_Resources/Icons.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml" />

                <ResourceDictionary Source="pack://application:,,,/Views/Styles/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
            

            <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
            <converters:DoubleToBrushConverter x:Key="DoubleToBrushConverter"/>
            <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
            <converters:IntMonthYearToTextConverter x:Key="IntMonthYearToTextConverter"/>
            <converters:TransactionTypeToColorConverter x:Key="TransactionTypeToColorConverter"/>
            <converters:BankAccountToVisibileConverter x:Key="BankAccountToVisibileConverter"/>
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <converters:DoubleToVisibilityConverter x:Key="DoubleToVisibilityConverter"/>
            <converters:NotNullAndBoolToVisibilityConverter x:Key="NotNullAndBoolToVisibilityConverter"/>
            
            
            <converters:ConverterChain x:Key="InverseBooleanToVisibilityConverter">
                <converters:InverseBooleanConverter/>
                <BooleanToVisibilityConverter/>
            </converters:ConverterChain>
            <converters:ConverterChain x:Key="IntToVisibilityConverter">
                <converters:IntToBooleanConverter/>
                <BooleanToVisibilityConverter/>
            </converters:ConverterChain>
            <converters:ConverterChain x:Key="InverseIntToVisibilityConverter">
                <converters:IntToBooleanConverter/>
                <converters:InverseBooleanConverter/>
            </converters:ConverterChain>
            <converters:ConverterChain x:Key="EmptyToVisibilityConverter">
                <converters:StringSizeToBooleanConverter/>
                <converters:InverseBooleanConverter/>
                <BooleanToVisibilityConverter/>
            </converters:ConverterChain>
            <converters:ConverterChain x:Key="InverseEmptyToVisibilityConverter">
                <converters:StringSizeToBooleanConverter/>
                <BooleanToVisibilityConverter/>
            </converters:ConverterChain>
            
            
            <ControlTemplate x:Key="EbExpanderControl" TargetType="{x:Type Expander}">
                <Grid>
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal"/>
                            <VisualState x:Name="MouseOver"/>
                            <VisualState x:Name="Disabled">
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="DisabledVisualElement">
                                        <SplineDoubleKeyFrame KeyTime="0" Value="0.7"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ExpanderRoot">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0"/>
                    <DockPanel x:Name="ExpanderRoot">
                        <Border x:Name="HeaderSite" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                DockPanel.Dock="Top" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                UseLayoutRounding="True">
                            <Border.Resources>
                                <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="BorderBrush" Value="Transparent" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Setter Property="Margin" Value="4" />
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                    <Setter Property="VerticalContentAlignment" Value="Center" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        Padding="{TemplateBinding Padding}">
                                                    <Grid Background="Transparent" SnapsToDevicePixels="False" MinHeight="23">
                                                       <controls:ContentControlEx Margin="2,0,0,0"
                                                           Content="{TemplateBinding Content}"
                                                           ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                           ContentTemplate="{TemplateBinding ContentTemplate}"
                                                           ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                           Padding="{TemplateBinding Padding}"
                                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                           RecognizesAccessKey="True"
                                                           ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.ContentCharacterCasing)}" />
                                                    </Grid>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsChecked" Value="true">
                                                    </Trigger>
                                                    <Trigger Property="IsMouseOver" Value="true">
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="true">
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Border.Resources>
                            <ToggleButton x:Name="ToggleSite" 
                                          controls:ControlsHelper.ContentCharacterCasing="{Binding (controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" 
                                          ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                          Content="{TemplateBinding Header}" 
                                          ContentStringFormat="{TemplateBinding HeaderStringFormat}" 
                                          FontWeight="{TemplateBinding controls:ControlsHelper.HeaderFontWeight}" 
                                          FontStretch="{TemplateBinding controls:ControlsHelper.HeaderFontStretch}" 
                                          FontSize="{TemplateBinding controls:ControlsHelper.HeaderFontSize}" 
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          Style="{StaticResource ExpanderDownHeaderStyle}" 
                                          UseLayoutRounding="False">
                            </ToggleButton>
                        </Border>
                        <Border x:Name="ExpandSite" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="True" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Border.BorderThickness>
                                <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.ConverterParameter>
                                        <shared:IgnoreThicknessSideType>Top</shared:IgnoreThicknessSideType>
                                    </Binding.ConverterParameter>
                                    <Binding.Converter>
                                        <shared:ThicknessBindingConverter IgnoreThicknessSide="Top"/>
                                    </Binding.Converter>
                                </Binding>
                            </Border.BorderThickness>
                            <ContentPresenter Cursor="{TemplateBinding Cursor}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" UseLayoutRounding="False"/>
                        </Border>
                    </DockPanel>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.25" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ExpandSite"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.25" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ExpandSite"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                        <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="ExpandDirection" Value="Right">
                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                        <Setter Property="BorderThickness" TargetName="ExpandSite">
                            <Setter.Value>
                                <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.ConverterParameter>
                                        <shared:IgnoreThicknessSideType>Left</shared:IgnoreThicknessSideType>
                                    </Binding.ConverterParameter>
                                    <Binding.Converter>
                                        <shared:ThicknessBindingConverter IgnoreThicknessSide="Top"/>
                                    </Binding.Converter>
                                </Binding>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                        <Setter Property="Style" TargetName="ToggleSite" Value="{Binding (controls:ExpanderHelper.HeaderRightStyle), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Trigger>
                    <Trigger Property="ExpandDirection" Value="Up">
                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                        <Setter Property="BorderThickness" TargetName="ExpandSite">
                            <Setter.Value>
                                <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.ConverterParameter>
                                        <shared:IgnoreThicknessSideType>Bottom</shared:IgnoreThicknessSideType>
                                    </Binding.ConverterParameter>
                                    <Binding.Converter>
                                        <shared:ThicknessBindingConverter IgnoreThicknessSide="Top"/>
                                    </Binding.Converter>
                                </Binding>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                        <Setter Property="Style" TargetName="ToggleSite" Value="{Binding (controls:ExpanderHelper.HeaderUpStyle), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Trigger>
                    <Trigger Property="ExpandDirection" Value="Left">
                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                        <Setter Property="BorderThickness" TargetName="ExpandSite">
                            <Setter.Value>
                                <Binding Path="BorderThickness" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.ConverterParameter>
                                        <shared:IgnoreThicknessSideType>Right</shared:IgnoreThicknessSideType>
                                    </Binding.ConverterParameter>
                                    <Binding.Converter>
                                        <shared:ThicknessBindingConverter IgnoreThicknessSide="Top"/>
                                    </Binding.Converter>
                                </Binding>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                        <Setter Property="Style" TargetName="ToggleSite" Value="{Binding (controls:ExpanderHelper.HeaderLeftStyle), RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="EbFlatButton" TargetType="{x:Type Button}">
                <Border x:Name="Border" MinHeight="29"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        Margin="0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                    <controls:ContentControlEx x:Name="PART_ContentPresenter"
                                                Content="{TemplateBinding Content}"
                                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                Padding="{TemplateBinding Padding}"
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                RecognizesAccessKey="True"
                                                ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.ContentCharacterCasing)}" />
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush2}" TargetName="Border" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}" />
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush3}" />
                    </Trigger>
                        
                </ControlTemplate.Triggers>
            </ControlTemplate>

        </ResourceDictionary>
    </Application.Resources>
</Application>
